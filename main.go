package main

import (
	"context"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"

	"github.com/joho/godotenv"
	_ "github.com/ryanjoyce/lights/lights_server_go/docs" // docs is generated by Swag CLI, you have to import it.
	httpSwagger "github.com/swaggo/http-swagger"

	"github.com/ryanjoyce/lights/lights_server_go/api"
	"github.com/ryanjoyce/lights/lights_server_go/utils"
)

// @title Lights Server API
// @version 1.0
// @description This is a server for controlling lights
// @host localhost:8080
// @BasePath /
func init() {
	// Load .env file if it exists
	godotenv.Load()
	
	// Configure logging
	log.SetOutput(os.Stdout)
	log.SetFlags(log.LstdFlags | log.Lshortfile)

	// Initialize OpenTelemetry
	tp, err := utils.InitTelemetry()
	if err != nil {
		log.Fatalf("Failed to initialize telemetry: %v", err)
	}

	// Connect to MQTT broker
	if err := utils.ConnectMQTT(); err != nil {
		log.Fatalf("Failed to connect to MQTT broker: %v", err)
	}

	// Register cleanup function
	go func() {
		sigChan := make(chan os.Signal, 1)
		signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)
		<-sigChan

		if err := tp.Shutdown(context.Background()); err != nil {
			log.Printf("Error shutting down tracer provider: %v", err)
		}
		os.Exit(0)
	}()
}

// Simple CORS middleware
func corsMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// Set CORS headers
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE, OPTIONS")
		w.Header().Set("Access-Control-Allow-Headers", "Origin, Content-Type, Accept")
		w.Header().Set("Access-Control-Allow-Credentials", "true")

		// Handle preflight requests
		if r.Method == http.MethodOptions {
			w.WriteHeader(http.StatusOK)
			return
		}

		// Call the next handler
		next.ServeHTTP(w, r)
	})
}

func main() {
	// Create a new ServeMux (router)
	mux := http.NewServeMux()

	// Health check endpoint
	mux.HandleFunc("/health", api.HealthCheck)
	
	// API routes with logging middleware
	mux.HandleFunc("/messages", api.LoggingMiddleware(api.ReceiveMessage))

	// Swagger documentation
	mux.Handle("/docs/", httpSwagger.WrapHandler)

	// Create a server with CORS middleware
	server := &http.Server{
		Addr:    "0.0.0.0:8080",
		Handler: corsMiddleware(mux),
	}

	// Start server
	port := "8080"
	log.Printf("Server running on port %s", port)
	if err := server.ListenAndServe(); err != nil {
		log.Fatalf("Failed to start server: %v", err)
	}
} 